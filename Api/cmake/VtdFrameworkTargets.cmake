# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget VtdCore VtdMath VtdNetwork VtdToolkit VtdThreads VtdHdf5 VtdCompression VtdEncryption)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target VtdCore
add_library(VtdCore STATIC IMPORTED)

set_target_properties(VtdCore PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=\$<BOOL:OFF>;\$<\$<CONFIG:Debug>:VTD_DEBUG>;\$<\$<PLATFORM_ID:Linux>:VTD_OS_LINUX>;\$<\$<PLATFORM_ID:Windows>:VTD_OS_WINDOWS>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:\$<\$<PLATFORM_ID:Linux>:rt>>;TinyXML::Static;Boost::chrono;Boost::filesystem;Boost::thread"
)

# Create imported target VtdMath
add_library(VtdMath STATIC IMPORTED)

set_target_properties(VtdMath PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "\$<\$<CONFIG:Debug>:VTD_DEBUG>;\$<\$<PLATFORM_ID:Linux>:VTD_OS_LINUX>;\$<\$<PLATFORM_ID:Windows>:VTD_OS_WINDOWS>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "VtdCore;\$<LINK_ONLY:\$<\$<PLATFORM_ID:Linux>:rt>>"
)

# Create imported target VtdNetwork
add_library(VtdNetwork STATIC IMPORTED)

set_target_properties(VtdNetwork PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "VtdCore;VtdToolkit;\$<\$<PLATFORM_ID:Linux>:rt>;Boost::system;Boost::thread;Boost::chrono;Boost::regex"
)

# Create imported target VtdToolkit
add_library(VtdToolkit STATIC IMPORTED)

set_target_properties(VtdToolkit PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "PNG_ENABLED;JPEG_ENABLED"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "PNG::PNG;JPEG::JPEG;VtdCore;\$<LINK_ONLY:Boost::system>;\$<LINK_ONLY:Boost::filesystem>;\$<LINK_ONLY:Boost::thread>;\$<LINK_ONLY:Boost::chrono>"
)

# Create imported target VtdThreads
add_library(VtdThreads STATIC IMPORTED)

set_target_properties(VtdThreads PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "VtdCore;\$<\$<PLATFORM_ID:Linux>:rt>;Boost::thread;Boost::chrono;Boost::system"
)

# Create imported target VtdHdf5
add_library(VtdHdf5 STATIC IMPORTED)

set_target_properties(VtdHdf5 PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "HDF_ENABLED"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:\$<\$<PLATFORM_ID:Linux>:rt>>;VtdCore;VtdToolkit;VtdThreads;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_cpp.a;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.a;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libsz.so;/usr/lib/x86_64-linux-gnu/libz.so;/usr/lib/x86_64-linux-gnu/libdl.so;/usr/lib/x86_64-linux-gnu/libm.so;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_hl_cpp.a;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_hl.a;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5_cpp.a;/usr/lib/x86_64-linux-gnu/hdf5/serial/libhdf5.a;/usr/lib/x86_64-linux-gnu/libpthread.so;/usr/lib/x86_64-linux-gnu/libsz.so;/usr/lib/x86_64-linux-gnu/libz.so;/usr/lib/x86_64-linux-gnu/libdl.so;/usr/lib/x86_64-linux-gnu/libm.so"
)

# Create imported target VtdCompression
add_library(VtdCompression STATIC IMPORTED)

set_target_properties(VtdCompression PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GLIBCXX_USE_CXX11_ABI=\$<BOOL:OFF>;\$<\$<CONFIG:Debug>:VTD_DEBUG>"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "Lz4::Lz4;ZLIB::ZLIB;VtdCore;\$<LINK_ONLY:\$<\$<PLATFORM_ID:Linux>:rt>>"
)

# Create imported target VtdEncryption
add_library(VtdEncryption STATIC IMPORTED)

set_target_properties(VtdEncryption PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "VtdCore;dl"
)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/VtdFrameworkTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
